<apps version="2.0">
  
  <app keywords="psoc4,starter,template,empty,blank,mtb-flow">
    <name>Empty PSoC4 App</name>
    <id>mtb-example-psoc4-empty-app</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-empty-app</uri>
    <description><![CDATA[This empty application provides a template for creating applications using PSoC 4 devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-empty-app/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,capsense,slider,linear slider,csd,tuning,i2c,tuner">
    <name>CapSense CSD Slider Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-slider-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-slider-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune Self Capacitance (CSD) based slider widget in PSoC 4 devices using CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-slider-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_linear_slider</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-slave,callback,pwm,mtb-flow">
    <name>I2C Slave Using Callbacks</name>
    <id>mtb-example-psoc4-i2c-slave-callback</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-slave-callback</uri>
    <description><![CDATA[This example demonstrates the operation of the I2C block for PSoC 4 in Slave mode using callbacks.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-slave-callback/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,tcpwm,interrupt">
    <name>Periodic Interrupt Using TCPWM</name>
    <id>mtb-example-psoc4-tcpwm-interrupt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-tcpwm-interrupt</uri>
    <description><![CDATA[This example uses the TCPWM Component in the Timer/Counter mode to generate a periodic interrupt. An LED toggles whenever the interrupt occurs.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-tcpwm-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,uart,led,mtb-flow">
    <name>Hello World</name>
    <id>mtb-example-psoc4-hello-world</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-hello-world</uri>
    <description><![CDATA[This code example demonstrates simple UART communication by printing a "Hello World" message on a terminal and blinks an LED using PSoC 4 devices.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-hello-world/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,mtb-flow,gpio,interrupt,isr,led,deep sleep">
    <name>GPIO Interrupt</name>
    <id>mtb-example-psoc4-gpio-interrupt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-gpio-interrupt</uri>
    <description><![CDATA[This code example demonstrates the use of a GPIO configured as an input pin to generate interrupts on PSoC 4. The GPIO signal interrupts the CPU and executes a user-defined Interrupt Service Routine (ISR). The GPIO interrupt acts as a wakeup source to wake the CPU from Deep Sleep.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-gpio-interrupt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csx,button,tuning,ezi2c,mtb-flow">
    <name>CapSense CSX Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csx-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance (CSX)-based button widget in PSoC 4 devices using CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,i2c,i2c-master,ezi2c-slave,mtb-flow">
    <name>I2C Master EzI2C Slave</name>
    <id>mtb-example-psoc4-i2c-master-slave</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-master-slave</uri>
    <description><![CDATA[This example demonstrates the operation of I2C resource for PSoC 4 in Master mode with an EzI2C slave.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-i2c-master-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 2.X release</num>
        <commit>latest-v2.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>2.0.0 release</num>
        <commit>release-v2.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,master">
    <name>SPI Master</name>
    <id>mtb-example-psoc4-spi-master</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-master</uri>
    <description><![CDATA[This example demonstrates the use of a SPI resource for PSoC 4 in master mode using high level APIs. The SPI master is configured to send command packets to control a user LED on the slave.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-master/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,spi,slave">
    <name>SPI Slave</name>
    <id>mtb-example-psoc4-spi-slave</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-slave</uri>
    <description><![CDATA[This example demonstrates the use of a SPI Serial Communication Block (SCB) resource for PSoC 4 in slave mode using high-level API. This example is intended to be used with PSoC 4 SPI Master project
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-spi-slave/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,dma">
    <name>SCB UART Transmit and Receive with DMA</name>
    <id>mtb-example-psoc4-uart-transmit-receive-dma</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive-dma</uri>
    <description><![CDATA[This code example demonstrates the UART transmit and receive operation in PSoC 4 using DMA. The application uses a serial terminal to read data and echoes what is received.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,led,pwm,tcpwm,dma,breathing">
    <name>PWM Triggering a DMA Channel</name>
    <id>mtb-example-psoc4-pwm-trigger-dma</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-pwm-trigger-dma</uri>
    <description><![CDATA[This example demonstrates how to route trigger signals on a PSoC 4 device.The trigger signal, in this code example, is routed from the PWM to the DMA, using Device Configurator.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-pwm-trigger-dma/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led dma</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,uart,transmit,receive">
    <name>UART Transmit and Receive</name>
    <id>mtb-example-psoc4-uart-trasmit-receive</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-transmit-receive</uri>
    <description><![CDATA[This example demonstrates the UART transmit and receive operation in PSoC 4 device. The application uses a serial terminal to read data and to echo back the received data.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-uart-trasmit-receive/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,wdt,interrupt,reset,deepsleep,mtb-flow">
    <name>Watchdog timer interrupt and reset</name>
    <id>mtb-example-psoc4-wdt</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdt</uri>
    <description><![CDATA[This code example features the watchdog timer and its usage in interrupt mode, reset mode and how to wake up the device from deepsleep using watchdog interrupt.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdt/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow,psoc4,wdc,interrupt">
    <name>Watchdog Counter Interrupts</name>
    <id>mtb-example-psoc4-wdc</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdc</uri>
    <description><![CDATA[This example demonstrates the use of PSoC 4 Watchdog Counters in cascaded mode. The user LED is toggled every time the Counter2 interrupt occurs. The match values of all the counters are set to toggle the LED every 1 second.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-wdc/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 wdc led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="mtb-flow, psoc4, low power, uart, led">
    <name>Power Modes</name>
    <id>mtb-example-psoc4-power-modes</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-power-modes</uri>
    <description><![CDATA[This code example shows how to enter system Sleep and Deep Sleep modes. After entering Deep Sleep or Sleep mode, the example also shows how to wake up from these low-power modes and return to normal Active mode.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-power-modes/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,capsense,csd,button,tuning,ezi2c,mtb-flow">
    <name>CapSense CSD Button Tuning</name>
    <id>mtb-example-psoc4-capsense-csd-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance (CSD) based button widget in PSoC 4 devices using CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led capsense_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csd,button,tuning,mtb-flow">
    <name>MSC CapSense CSD Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csd-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a self capacitance-based button widget in PSoC 4 devices using the Multi Sense Converter (MSC) CSD-RM sensing technique and CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csd-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
  <app keywords="psoc4,msc,capsense,csx,button,tuning,mtb-flow">
    <name>MSC CapSense CSX Button Tuning</name>
    <id>mtb-example-psoc4-msc-capsense-csx-button-tuning</id>
    <uri>https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-button-tuning</uri>
    <description><![CDATA[This code example demonstrates how to manually tune a mutual capacitance-based button widget in PSoC 4 devices using the Multi Sense Converter (MSC) CSX-RM sensing technique and CapSense Tuner GUI.
    <br><br>For more details, see the <a href="https://github.com/cypresssemiconductorco/mtb-example-psoc4-msc-capsense-csx-button-tuning/blob/master/README.md">README on GitHub</a>.]]></description>
    <req_capabilities>psoc4 led msc_button</req_capabilities>
    <versions>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>Latest 1.X release</num>
        <commit>latest-v1.X</commit>
      </version>
      <version flow_version="2.0" tools_min_version="2.2.0" req_capabilities_per_version="bsp_gen2">
        <num>1.0.0 release</num>
        <commit>release-v1.0.0</commit>
      </version>
    </versions>
  </app>
</apps>
